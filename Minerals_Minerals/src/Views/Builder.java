/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

import Models.*;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.util.LinkedList;

/**
 *
 * @author darkd
 */
public class Builder extends java.awt.Dialog
{

    private Mine mine;
    boolean flagEntry = false;
    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

    /**
     * Creates new form Maker
     *
     * @param parent
     * @param modal
     * @param m
     */
    public Builder(java.awt.Frame parent, boolean modal, Mine m)
    {
        super(parent, modal);
        mine = m;
        Wall w = new Wall(0, 0);
        LinkedList<SectionMap> L = new LinkedList<>();
        L.add(new SectionMap(w));
        this.mine.getMatrix().add(L);

        initComponents();
        this.panelMaker1.setMine(this.mine);
        this.setTitle("Mine Map");
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        this.setSize((int) (screenSize.getWidth()) - 80, (int) (screenSize.getHeight()) - 80);
        //this.setResizable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelMaker1 = new Views.PanelOfBuilder();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnAddWidth = new javax.swing.JButton();
        btnLessWidth = new javax.swing.JButton();
        btnAddHeight = new javax.swing.JButton();
        btnLessHeight = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        minersCapability = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        timeEx = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        vel = new javax.swing.JTextField();
        selectVel = new javax.swing.JComboBox<>();
        selectTime = new javax.swing.JComboBox<>();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        panelMaker1.setBackground(new java.awt.Color(0, 0, 102));
        panelMaker1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelMaker1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelMaker1Layout = new javax.swing.GroupLayout(panelMaker1);
        panelMaker1.setLayout(panelMaker1Layout);
        panelMaker1Layout.setHorizontalGroup(
            panelMaker1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelMaker1Layout.setVerticalGroup(
            panelMaker1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel1.setText("Opciones");

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel2.setText("Ancho");

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel3.setText(" Alto");

        btnAddWidth.setBackground(new java.awt.Color(204, 204, 204));
        btnAddWidth.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        btnAddWidth.setText("+");
        btnAddWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddWidthActionPerformed(evt);
            }
        });

        btnLessWidth.setBackground(new java.awt.Color(204, 204, 204));
        btnLessWidth.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        btnLessWidth.setText("-");
        btnLessWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLessWidthActionPerformed(evt);
            }
        });

        btnAddHeight.setBackground(new java.awt.Color(204, 204, 204));
        btnAddHeight.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        btnAddHeight.setText("+");
        btnAddHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddHeightActionPerformed(evt);
            }
        });

        btnLessHeight.setBackground(new java.awt.Color(204, 204, 204));
        btnLessHeight.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        btnLessHeight.setText("-");
        btnLessHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLessHeightActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(204, 204, 204));
        jButton6.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jButton6.setText("Guardar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(204, 204, 204));
        jButton7.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jButton7.setText("Cargar");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(204, 204, 204));
        jButton8.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jButton8.setText("Nuevo");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        btnCreate.setBackground(new java.awt.Color(204, 204, 204));
        btnCreate.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        btnCreate.setText("!!Crear¡¡");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jButton1.setText("Entrada");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel4.setText("Capacidad de mineros:");

        minersCapability.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        minersCapability.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        minersCapability.setText("0");

        jLabel5.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel5.setText("Tiempo de extracción:");

        timeEx.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        timeEx.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        timeEx.setText("0");

        jLabel6.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel6.setText("Velocidad de desplazamiento:");

        vel.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        vel.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        vel.setText("0");

        selectVel.setEditable(true);
        selectVel.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        selectVel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "m/s", "m/h" }));

        selectTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SEGUNDOS", "MINUTOS", "HORA" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelMaker1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(30, 30, 30)
                        .addComponent(minersCapability, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeEx, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(vel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(selectVel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAddHeight)
                                    .addComponent(jLabel3)
                                    .addComponent(btnLessHeight)
                                    .addComponent(jLabel2)
                                    .addComponent(btnAddWidth)
                                    .addComponent(btnLessWidth)))
                            .addComponent(jLabel1)
                            .addComponent(jButton8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton6)
                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelMaker1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLessWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(btnLessHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(minersCapability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(timeEx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(vel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectVel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_closeDialog

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton6ActionPerformed
    {//GEN-HEADEREND:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton7ActionPerformed
    {//GEN-HEADEREND:event_jButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton8ActionPerformed
    {//GEN-HEADEREND:event_jButton8ActionPerformed

    }//GEN-LAST:event_jButton8ActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCreateActionPerformed
    {//GEN-HEADEREND:event_btnCreateActionPerformed
        for (int i = 0; i < this.mine.getMatrix().size(); i++)
        {
            for (int j = 0; j < this.mine.getMatrix().get(i).size(); j++)
            {
                if (this.mine.getMatrix().get(i).get(j).getObject() instanceof Road)
                    this.giveImage(i, j, this.mine.getMatrix().size(), this.mine.getMatrix().get(i).size());
            }
        }
        if (!this.minersCapability.getText().equals("") && !this.timeEx.getText().equals(""))
        {
            this.mine.setMaxMiners(Integer.parseInt(this.minersCapability.getText()));
            this.mine.setTimeToExtract(Double.parseDouble(this.timeEx.getText()));
            this.mine.setUnitTimeToExtract(this.selectTime.getSelectedItem().toString());
            this.mine.setSpeed(Double.parseDouble(this.vel.getText()));
            this.mine.setUnitSpeed(this.selectVel.getSelectedItem().toString());
            this.amountOfEveryDeposit();
            this.setVisible(false);
            this.dispose();
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnAddWidthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddWidthActionPerformed
        for (int i = 0; i < this.mine.getMatrix().size(); i++)
        {
            int x = 0, width = 0, y = 0;
            if (this.mine.getMatrix().get(i).getLast().getObject() instanceof Wall)
            {
                Wall w = (Wall) this.mine.getMatrix().get(i).getLast().getObject();
                x = w.getX();
                width = w.getWidth();
                y = w.getY();
            }
            else if (this.mine.getMatrix().get(i).getLast().getObject() instanceof Road)
            {
                Road w = (Road) this.mine.getMatrix().get(i).getLast().getObject();
                x = w.getX();
                width = w.getWidth();
                y = w.getY();
            }
            else if (this.mine.getMatrix().get(i).getLast().getObject() instanceof Deposit)
            {
                Deposit w = (Deposit) this.mine.getMatrix().get(i).getLast().getObject();
                x = w.getX();
                width = w.getWidth();
                y = w.getY();
            }

            this.mine.getMatrix().get(i).add(new SectionMap(new Wall(x + width, y)));
        }
    }//GEN-LAST:event_btnAddWidthActionPerformed
    private void btnLessWidthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLessWidthActionPerformed
        for (int i = 0; i < this.mine.getMatrix().size(); i++)
        {
            this.mine.getMatrix().get(i).removeLast();
        }
    }//GEN-LAST:event_btnLessWidthActionPerformed

    private void btnAddHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddHeightActionPerformed
        LinkedList<SectionMap> l = new LinkedList<>();
        int position = 0, width = 0, height = 0, y = 0;
        if (this.mine.getMatrix().getLast().getFirst().getObject() instanceof Wall)
        {
            Wall w = (Wall) this.mine.getMatrix().getLast().getFirst().getObject();
            width = w.getWidth();
            height = w.getHeight();
            y = w.getY();
        }
        else if (this.mine.getMatrix().getLast().getFirst().getObject() instanceof Deposit)
        {
            Deposit w = (Deposit) this.mine.getMatrix().getLast().getFirst().getObject();
            width = w.getWidth();
            height = w.getHeight();
            y = w.getY();
        }
        else if (this.mine.getMatrix().getLast().getFirst().getObject() instanceof Road)
        {
            Road w = (Road) this.mine.getMatrix().getLast().getFirst().getObject();
            width = w.getWidth();
            height = w.getHeight();
            y = w.getY();
        }

        for (SectionMap first : this.mine.getMatrix().getFirst())
        {
            l.add(new SectionMap(new Wall(position, y + height)));
            position += width;
        }
        this.mine.getMatrix().add(l);
    }//GEN-LAST:event_btnAddHeightActionPerformed

    private void btnLessHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLessHeightActionPerformed
        this.mine.getMatrix().removeLast();
    }//GEN-LAST:event_btnLessHeightActionPerformed

    private void panelMaker1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMaker1MouseClicked
        if (flagEntry)
        {
            for (int i = 0; i < this.mine.getMatrix().size(); i++)
            {
                for (int j = 0; j < this.mine.getMatrix().get(i).size(); j++)
                {
                    if (this.mine.getMatrix().get(i).get(j).getObject() instanceof Road)
                    {
                        Road road = (Road) this.mine.getMatrix().get(i).get(j).getObject();
                        Rectangle r = new Rectangle(road.getX(), road.getY(), road.getWidth(), road.getHeight());
                        if (r.intersects(new Rectangle(evt.getX(), evt.getY(), 1, 1)))
                            if (j == 0)
                            {
                                Road ro = new Road(road.getX(), road.getY(), true, 1);
                                this.mine.getMatrix().get(i).get(j).setObject(ro);
                            }
                            else if (i == 0)
                            {
                                Road ro = new Road(road.getX(), road.getY(), true, 2);
                                this.mine.getMatrix().get(i).get(j).setObject(ro);
                            }
                            else if (j == this.mine.getMatrix().get(i).size() - 1)
                            {
                                Road ro = new Road(road.getX(), road.getY(), true, 3);
                                this.mine.getMatrix().get(i).get(j).setObject(ro);
                            }
                            else if (i == this.mine.getMatrix().size() - 1)
                            {
                                Road ro = new Road(road.getX(), road.getY(), true, 4);
                                this.mine.getMatrix().get(i).get(j).setObject(ro);
                            }
                    }
                }
            }
        }
        else
            for (int i = 0; i < this.mine.getMatrix().size(); i++)
            {
                for (int j = 0; j < this.mine.getMatrix().get(i).size(); j++)
                {
                    if (this.mine.getMatrix().get(i).get(j).getObject() instanceof Wall)
                    {
                        Wall w = (Wall) this.mine.getMatrix().get(i).get(j).getObject();
                        Rectangle r = new Rectangle(w.getX(), w.getY(), w.getWidth(), w.getHeight());
                        if (r.intersects(new Rectangle(evt.getX(), evt.getY(), 1, 1)))
                        {
                            Road road = new Road(w.getX(), w.getY(), false, 0);
                            this.mine.getMatrix().get(i).get(j).setObject(road);
                        }
                    }
                    else if (this.mine.getMatrix().get(i).get(j).getObject() instanceof Road)
                    {
                        Road ro = (Road) this.mine.getMatrix().get(i).get(j).getObject();
                        Rectangle r = new Rectangle(ro.getX(), ro.getY(), ro.getWidth(), ro.getHeight());
                        if (r.intersects(new Rectangle(evt.getX(), evt.getY(), 1, 1)))
                        {
                            Deposit deposit = new Deposit(ro.getX(), ro.getY(), this.mine.getMetal());
                            this.mine.getMatrix().get(i).get(j).setObject(deposit);
                            this.mine.setAmountOfDeposits(this.mine.getAmountOfDeposits() + 1);
                        }
                    }
                    else if (this.mine.getMatrix().get(i).get(j).getObject() instanceof Deposit)
                    {
                        Deposit d = (Deposit) this.mine.getMatrix().get(i).get(j).getObject();
                        Rectangle r = new Rectangle(d.getX(), d.getY(), d.getWidth(), d.getHeight());
                        if (r.intersects(new Rectangle(evt.getX(), evt.getY(), 1, 1)))
                        {
                            Wall wall = new Wall(d.getX(), d.getY());
                            this.mine.getMatrix().get(i).get(j).setObject(wall);
                            this.mine.setAmountOfDeposits(this.mine.getAmountOfDeposits() - 1);
                        }
                    }
                }
            }
    }//GEN-LAST:event_panelMaker1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        flagEntry = true;
    }//GEN-LAST:event_jButton1ActionPerformed

    public void giveImage(int f, int c, int limitF, int limitC)
    {
        boolean up = false;
        boolean down = false;
        boolean right = false;
        boolean left = false;
        if (c > 0)
            if ((this.mine.getMatrix().get(f).get(c - 1).getObject() instanceof Road) || (this.mine.getMatrix().get(f).get(c - 1).getObject() instanceof Deposit))
                left = true;
        if (c < limitC - 1)
            if ((this.mine.getMatrix().get(f).get(c + 1).getObject() instanceof Road) || (this.mine.getMatrix().get(f).get(c + 1).getObject() instanceof Deposit))
                right = true;
        if (f < limitF - 1)
            if ((this.mine.getMatrix().get(f + 1).get(c).getObject() instanceof Road) || (this.mine.getMatrix().get(f + 1).get(c).getObject() instanceof Deposit))
                down = true;
        if (f > 0)
            if ((this.mine.getMatrix().get(f - 1).get(c).getObject() instanceof Road) || (this.mine.getMatrix().get(f - 1).get(c).getObject() instanceof Deposit))
                up = true;

        if (left == true && right == true && down == false && up == false)
        {
            Road r = (Road) (this.mine.getMatrix().get(f).get(c).getObject());
            r.setImage(r.getImages()[1]);
        }
        else if (left == false && right == false && down == true && up == true)
        {
            Road r = (Road) (this.mine.getMatrix().get(f).get(c).getObject());
            r.setImage(r.getImages()[0]);
        }
        else if (left == true && right == false && down == false && up == true)
        {
            Road r = (Road) (this.mine.getMatrix().get(f).get(c).getObject());
            r.setImage(r.getImages()[2]);
        }
        else if (left == false && right == true && down == false && up == true)
        {
            Road r = (Road) (this.mine.getMatrix().get(f).get(c).getObject());
            r.setImage(r.getImages()[3]);
        }
        else if (left == false && right == true && down == true && up == false)
        {
            Road r = (Road) (this.mine.getMatrix().get(f).get(c).getObject());
            r.setImage(r.getImages()[4]);
        }
        else if (left == true && right == false && down == true && up == false)
        {
            Road r = (Road) (this.mine.getMatrix().get(f).get(c).getObject());
            r.setImage(r.getImages()[5]);
        }
        else if (left == true && right == true && down == true && up == true)
        {
            Road r = (Road) (this.mine.getMatrix().get(f).get(c).getObject());
            r.setImage(r.getImages()[6]);
        }
        else if (left == true && right == true && down == false && up == true)
        {
            Road r = (Road) (this.mine.getMatrix().get(f).get(c).getObject());
            r.setImage(r.getImages()[7]);
        }
        else if (left == false && right == true && down == true && up == true)
        {
            Road r = (Road) (this.mine.getMatrix().get(f).get(c).getObject());
            r.setImage(r.getImages()[8]);
        }
        else if (left == true && right == false && down == true && up == true)
        {
            Road r = (Road) (this.mine.getMatrix().get(f).get(c).getObject());
            r.setImage(r.getImages()[9]);
        }
        else if (left == true && right == true && down == true && up == false)
        {
            Road r = (Road) (this.mine.getMatrix().get(f).get(c).getObject());
            r.setImage(r.getImages()[10]);
        }

    }

    public void amountOfEveryDeposit()
    {
        double amount = this.mine.getAmount() / this.mine.getAmountOfDeposits();
        this.mine.getMatrix().forEach((matrix) ->
        {
            matrix.stream().filter((section) -> (section.getObject() instanceof Deposit)).map((section) -> (Deposit) section.getObject()).forEachOrdered((d) ->
            {
                d.setAmount(amount);
                this.mine.setAmountForDeposit(amount);
            });
        });
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[])
//    {
//        
//        java.awt.EventQueue.invokeLater(new Runnable()
//        {
//            public void run()
//            {
//                Builder dialog = new Builder(new java.awt.Frame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter()
//                {
//                    public void windowClosing(java.awt.event.WindowEvent e)
//                    {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddHeight;
    private javax.swing.JButton btnAddWidth;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnLessHeight;
    private javax.swing.JButton btnLessWidth;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField minersCapability;
    private Views.PanelOfBuilder panelMaker1;
    private javax.swing.JComboBox<String> selectTime;
    private javax.swing.JComboBox<String> selectVel;
    private javax.swing.JTextField timeEx;
    private javax.swing.JTextField vel;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the mine
     */
    public Mine getMine()
    {
        return mine;
    }

    /**
     * @param mine the mine to set
     */
    public void setMine(Mine mine)
    {
        this.mine = mine;
    }
}
